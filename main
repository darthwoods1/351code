/*
 * Copyright (c) 2017-2020 Arm Limited and affiliates.
 * SPDX-License-Identifier: Apache-2.0
 */

#include "mbed.h"
#include <chrono>
#include <ctime>
#include <iostream>
#include<string>

using namespace std;



class Counter {
public:
    Counter(PinName pin) : _interrupt(pin)          // create the InterruptIn on the pin specified to Counter
    {
        timeSinceLastFlow.start();
        _interrupt.rise(callback(this, &Counter::increment)); // attach increment function of this counter instance
    }

    void increment()
    {

        _count++;
        _volume = calibrationFactor * _count;
        PulseInterrupt();
        timeSinceLastFlow.reset();

    }

    void PulseInterrupt()
    {
        InterruptFlag = true;
    }


    int readCount()
    {
        return _count;
    }

    float readVol()
    {
        return _volume;
    }
                        //Timers
    void updateTime()
    {

        if(InterruptFlag)
        {
            timeSinceFlow = 0;
            InterruptFlag = 0;
        }   else {
            timeSinceFlow += 1;
        }
    }


    int readtime()
    {
        return timeSinceLastFlow.read_us();
    }


private:
    InterruptIn _interrupt;
    Timer debounceTimer;
    Timer timeSinceLastFlow;
    static const int debounceTime = 10; //milli seconds
    static const int finalTime = 1000; //milli seconds
    volatile int timeSinceFlow = 0; 
    volatile bool InterruptFlag = false;
    volatile int _count;
    volatile float _volume;
    const float calibrationFactor = 3.424;
};

Counter counter(D0);

int main()
{
    while (1) {

        cout << "Count: " << counter.readCount() << "\n" << "Volume: " << counter.readVol() << "\n";
        cout << "Time since flow: " << counter.readtime() << endl; 
        
        
        
        ThisThread::sleep_for(2000);
    }
}
